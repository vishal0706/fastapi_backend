# Install pre-commit
#   pip install pre-commit
# Add pre-commit to .git/hooks/pre-commit
#   pre-commit install
# Install pre-commit hooks
#   pre-commit install-hooks
# Apply to all files without committing:
#   pre-commit run --all-files
# Update this file:
#   pre-commit autoupdate
# Run specific hook:
#   pre-commit run <hook> --all-files
# Run specific hook on a file:
#   pre-commit run <hook> <file>
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: check-added-large-files # prevents giant files from being committed.
      - id: check-ast # simply checks whether the files parse as valid python.
      - id: check-case-conflict # checks for files that would conflict in case-insensitive filesystems.
      - id: check-docstring-first # checks a common error of defining a docstring after code.
      - id: check-executables-have-shebangs # ensures that (non-binary) executables have a shebang.
      - id: check-json # checks json files for parseable syntax.
      - id: check-merge-conflict # checks for files that contain merge conflict strings.
      - id: check-shebang-scripts-are-executable # ensures that (non-binary) files with a shebang are executable.
      - id: check-toml # checks toml files for parseable syntax.
      - id: check-xml # checks xml files for parseable syntax.
      - id: check-yaml # checks yaml files for parseable syntax.
      - id: debug-statements # checks for debugger imports and py37+ `breakpoint()` calls in python source.
      - id: detect-private-key # detects the presence of private keys.
      - id: double-quote-string-fixer # replaces double quoted strings with single quoted strings.
      - id: end-of-file-fixer # ensures that a file is either empty, or ends with one newline.
      - id: fix-byte-order-marker # removes utf-8 byte order marker.
      - id: mixed-line-ending # replaces or checks mixed line ending.
      - id: requirements-txt-fixer # sorts entries in requirements.txt.
      - id: trailing-whitespace # trims trailing whitespace.

  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
      - id: python-use-type-annotations


  - repo: https://github.com/myint/autoflake
    rev: v2.2.0
    hooks:
      - id: autoflake
        args: [-i, -r, --remove-all-unused-imports, --expand-star-imports, --ignore-init-module-imports, --exclude=*/env/*]


  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        args: [--line-length=200, --skip-string-normalization, --skip-magic-trailing-comma]
        exclude: ^(\.git/|\.idea/)


  - repo: https://github.com/PyCQA/isort
    rev: 5.12.0
    hooks:
      - id: isort

  - repo: https://github.com/asottile/pyupgrade
    rev: v3.9.0
    hooks:
      - id: pyupgrade
        args: [--py39-plus]

  - repo: https://github.com/PyCQA/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        # additional_dependencies:
          # - flake8-typing-imports # Plugin which checks that typing imports are properly guarded.
          # - flake8-type-checking # flake8 plugin that helps identify which imports to put into type-checking blocks, and how to adjust your type annotations once imports are moved.
          # - flake8-pep585 # Enforce new style annotations from PEP585 such as list[int] instead of typing.List[int].
          # - flake8-new-union-types # Plugin to enforce new Union/Optional syntax Foo | Bar | None defined in PEP 604.
          # - flake8-annotations # important Plugin for flake8 to check for presence of type annotations in function definitions.
          # - flake8-annotations-coverage # Plugin to validate annotations coverage.
          # - flake8-fastapi # Checks FastAPI code against opinionated style rules.
          # - flake8-absolute-import # important
          # - flake8-eradicate # Plugin to find commented out or dead code.
          # - flake8-functions # Plugin for validation of function parameters (length, complexity, etc).
          # - flake8-expression-complexity # Plugin to validate expressions complexity.
          # - flake8-cognitive-complexity # Extension for flake8 that validates cognitive functions complexity.
          # - flake8-annotations-complexity # Plugin to validate annotations complexity.
          # - cohesion # Extension for measuring Python class cohesion.
          # - pep8-naming # Check the PEP-8 naming conventions.
          # - flake8-variables-names # important Extension that helps to make more readable variables names.
          # - flake8-functions-names # Validate functions names, decomposition and conformity with annotations.
          # - flake8-builtins # Check for python builtins being used as variables or parameters.
          # - flake8-print # important Report print statement.
          # - flake8-pep3101 # Report %-formatting.
          # - flake8-no-pep420 # Report implicit namespace packages.
          # - flake8-scream # Rules which do have known false-positives but might still be useful for a one-time run.
          # - flake8-return # Plugin that checks return values.
          # - flake8-quotes # Extension for checking quotes in python.
          # - flake8-obey-import-goat # Allows to forbid specific imports.
          # - flake8-newspaper-style # Ensures the function definition goes below its usage.
          # - flake8-multiline-containers # Plugin to ensure a consistent format for multiline containers.
          # - flake8-literal # Enforces consistent styling of string literals.
          # - flake8-implicit-str-concat # Plugin to encourage correct string literal concatenation.
          # - flake8-comprehensions # Helps you write better list/set/dict comprehensions.
          # - flake8-warnings # Detect usage of deprecated modules, classes, and functions.
          # - flake8-secure-coding-standard # Enforce some secure coding standards for Python.
          # - flake8-encodings # Identify incorrect use of encodings.
          # - flake8-alfred # Alfred is a flake8 plugin to warn on unsafe/obsolete symbols.
          # - flake8-2020 # Plugin which checks for misuse of sys.version or sys.version_info.
          # - wemake-python-styleguide # The strictest and most opinionated python linter ever.
          # - flake8-simplify # Plugin that helps you to simplify code.
          # - flake8-bugbear # Finding likely bugs and design problems in your program
          # - flake8-pie # Extension that implements misc. lints.


  - repo: https://github.com/PyCQA/pylint
    rev: v3.0.0a6
    hooks:
      - id: pylint
        args: ["-rn", "--rcfile=.pylintrc"]


  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: 'v1.4.1'
    hooks:
      - id: mypy
        # args: ["--strict"]


  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.5
    hooks:
      - id: codespell


  - repo: https://github.com/commitizen-tools/commitizen
    rev: 3.5.3
    hooks:
      - id: commitizen

  # - repo: https://github.com/python-poetry/poetry
  #   rev: '1.5.0'  # add version here
  #   hooks:
  #     - id: poetry-check
  #     - id: poetry-lock
  #     - id: poetry-export
  #       args: ["-f", "requirements.txt", "-o", "requirements.txt"]


  # - repo: https://github.com/PyCQA/bandit
  #   rev: 1.7.4
  #   hooks:
  #     - id: bandit
  #       args:
  #         - --exit-zero
  #         - --format
  #         - csv
  #         - --output
  #         - bandit-report.csv
  #         # - --skip
  #         # - B104,B311,B324,B105
  #         - --exclude
  #         - /env
  #         - --exit-zero
  #         - --recursive
  #         - .
  #       exclude: ^(\.git/|\.idea/)


  # - repo: https://github.com/crate-ci/typos
  #   rev: v1.10.2
  #   hooks:
  #     - id: typos
  #       args: [--write-changes]
  #       exclude: ^(\.git/|\.idea/)


  # - repo: https://github.com/AleksaC/hadolint-py
  #   rev: v2.10.0
  #   hooks:
  #     - id: hadolint

  # - repo: https://github.com/pre-commit/mirrors-autopep8
  #   rev: v1.6.0
  #   hooks:
  #     - id: autopep8
  #       args: [-a, -a, -a, -a, -a, -a, -a, -a, --max-line-length=200, --in-place]


  # - repo: https://github.com/DanielNoord/pydocstringformatter
  #   rev: v0.6.1
  #   hooks:
  #     - id: pydocstringformatter
  #       # args: ["--max-summary-lines=2", "--linewrap-full-docstring"]


  # - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
  #   rev: v1.2.4
  #   hooks:
  #     - id: python-safety-dependencies-check
  #       files: requirements
  #       # args: [--short-report]


  # - repo: https://github.com/PyCQA/prospector
  #   rev: 1.7.7
  #   hooks:
  #     - id: prospector
  #       args:
  #         - --summary-only
  #         - --zero-exit


  # - repo: https://github.com/snok/pep585-upgrade
  #   rev: v1.0
  #   hooks:
  #     - id: upgrade-type-hints



  # - repo: https://github.com/PyCQA/pydocstyle
  #   rev: 6.1.1
  #   hooks:
  #     - id: pydocstyle
  #       args:
  #         - --ignore=D100,D101,D105,D102,D103,D202,D203,D400,D405,D203,D212,D213,D214,D215,D404,D405,D406,D407,D408,D409,D410,D411,D413,D415,D416

  # - repo: https://github.com/pre-commit/mirrors-autopep8
  #   rev: v1.6.0
  #   hooks:
  #     - id: autopep8
  #       args: [-a, --experimental, --max-line-length=500, --in-place, -r]

  # - repo: https://github.com/myint/docformatter
  #   rev: v1.4
  #   hooks:
  #     - id: docformatter
  #       args: [--in-place, --wrap-summaries=0, --blank, --pre-summary-newline]


  # - repo: https://github.com/asottile/dead
  #   rev: v1.4.0
  #   hooks:
  #     - id: dead


  # - repo: https://github.com/asottile/reorder_python_imports
  #   rev: v3.1.0
  #   hooks:
  #   -   id: reorder-python-imports
  #       args: [--py37-plus, --add-import, 'from __future__ import annotations']

  # - repo: https://github.com/asottile/add-trailing-comma
  #   rev: v2.2.3
  #   hooks:
  #   -   id: add-trailing-comma
  #       args: [--py36-plus]

  # - repo: https://github.com/sqlalchemyorg/zimports/
  #   rev: v0.4.5
  #   hooks:
  #     - id: zimports
